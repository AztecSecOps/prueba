<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSONPlaceholder - Frontend</title>
    <style>
        
        body {
            font-family: Arial, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }
        
        .tabs {
            display: flex;
            margin-bottom: 20px;
            background-color: white;
            border-radius: 5px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .tab {
            padding: 12px 20px;
            cursor: pointer;
            background-color: #eee;
            flex: 1;
            text-align: center;
            transition: background-color 0.3s;
        }
        
        .tab:hover {
            background-color: #ddd;
        }
        
        .tab.active {
            background-color: #4CAF50;
            color: white;
        }
        
        .tab-content {
            display: none;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .tab-content.active {
            display: block;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        tr:hover {
            background-color: #f0f0f0;
        }
        
        button {
            padding: 6px 12px;
            margin: 2px;
            cursor: pointer;
            border: none;
            border-radius: 3px;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        
        .btn-primary {
            background-color: #4CAF50;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #45a049;
        }
        
        .btn-danger {
            background-color: #f44336;
            color: white;
        }
        
        .btn-danger:hover {
            background-color: #d32f2f;
        }
        
        .btn-warning {
            background-color: #ff9800;
            color: white;
        }
        
        .btn-warning:hover {
            background-color: #f57c00;
        }
    </style>
</head>
<body>
    <h1>JSONPlaceholder - Frontend</h1>
    
    <div class="tabs">
        <div class="tab active" onclick="showTab('users')">üë• Usuarios</div>
        <div class="tab" onclick="showTab('posts')">üìù Posts</div>
        <div class="tab" onclick="showTab('comments')">üí¨ Comentarios</div>
    </div>
    
    <!-- Pesta√±a de Usuarios -->
    <div id="users-tab" class="tab-content active">
        <h2>üë• Gesti√≥n de Usuarios</h2>
        <div id="users-content">
            <!-- Contenido cargado por JavaScript -->
        </div>
    </div>
    
    <!-- Pesta√±a de Posts -->
    <div id="posts-tab" class="tab-content">
        <h2>üìù Gesti√≥n de Posts</h2>
        <div id="posts-content">
            <!-- Contenido cargado por JavaScript -->
        </div>
    </div>
    
    <!-- Pesta√±a de Comentarios -->
    <div id="comments-tab" class="tab-content">
        <h2>üí¨ Gesti√≥n de Comentarios</h2>
        <div id="comments-content">
            <!-- Contenido cargado por JavaScript -->
        </div>
    </div>
    
    <!-- Modal para Usuarios -->
    <div id="user-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="user-modal-title">‚ûï Agregar Usuario</h2>
                <span class="close" onclick="closeUserModal()">&times;</span>
            </div>
            <form id="user-form">
                <input type="hidden" id="user-id">
                <div class="form-group">
                    <label for="user-name">üìõ Nombre:</label>
                    <input type="text" id="user-name" required>
                </div>
                <div class="form-group">
                    <label for="user-email">üìß Email:</label>
                    <input type="email" id="user-email" required>
                </div>
                <div class="form-group">
                    <label for="user-phone">üìû Tel√©fono:</label>
                    <input type="text" id="user-phone" required>
                </div>
                <div class="form-group">
                    <label for="user-city">üèôÔ∏è Ciudad:</label>
                    <input type="text" id="user-city" required>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn-primary">üíæ Guardar</button>
                    <button type="button" class="btn-danger" onclick="closeUserModal()">‚ùå Cancelar</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Modal para Posts -->
    <div id="post-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="post-modal-title">‚ûï Agregar Post</h2>
                <span class="close" onclick="closePostModal()">&times;</span>
            </div>
            <form id="post-form">
                <input type="hidden" id="post-id">
                <div class="form-group">
                    <label for="post-title">üì∞ T√≠tulo:</label>
                    <input type="text" id="post-title" required>
                </div>
                <div class="form-group">
                    <label for="post-body">üìÑ Contenido:</label>
                    <textarea id="post-body" rows="4" required></textarea>
                </div>
                <div class="form-group">
                    <label for="post-user">üë§ Usuario:</label>
                    <select id="post-user" required>
                        <option value="">Seleccionar usuario...</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn-primary">üíæ Guardar</button>
                    <button type="button" class="btn-danger" onclick="closePostModal()">‚ùå Cancelar</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Modal para Comentarios -->
    <div id="comment-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="comment-modal-title">‚ûï Agregar Comentario</h2>
                <span class="close" onclick="closeCommentModal()">&times;</span>
            </div>
            <form id="comment-form">
                <input type="hidden" id="comment-id">
                <div class="form-group">
                    <label for="comment-name">üìõ Nombre:</label>
                    <input type="text" id="comment-name" required>
                </div>
                <div class="form-group">
                    <label for="comment-email">üìß Email:</label>
                    <input type="email" id="comment-email" required>
                </div>
                <div class="form-group">
                    <label for="comment-body">üí¨ Comentario:</label>
                    <textarea id="comment-body" rows="4" required></textarea>
                </div>
                <div class="form-group">
                    <label for="comment-post">üìù Post:</label>
                    <select id="comment-post" required>
                        <option value="">Seleccionar post...</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn-primary">üíæ Guardar</button>
                    <button type="button" class="btn-danger" onclick="closeCommentModal()">‚ùå Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <style>
        .search-box {
            margin-bottom: 15px;
            padding: 10px;
            width: 100%;
            box-sizing: border-box;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        
        input, textarea, select {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        textarea {
            resize: vertical;
            min-height: 80px;
        }
        
        .form-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .modal-content {
            background-color: white;
            padding: 25px;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .modal-header h2 {
            margin: 0;
            color: #333;
        }
        
        .close {
            font-size: 28px;
            cursor: pointer;
            color: #777;
        }
        
        .close:hover {
            color: #333;
        }
        
        .comments-section {
            margin-top: 25px;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
            border-left: 4px solid #4CAF50;
        }
        
        .comment {
            padding: 15px;
            margin-bottom: 15px;
            background-color: white;
            border-radius: 6px;
            border-left: 3px solid #4CAF50;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .comment-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 14px;
        }
        
        .comment-author {
            font-weight: bold;
            color: #4CAF50;
        }
        
        .comment-email {
            color: #666;
        }
        
        .comment-body {
            font-style: italic;
            color: #444;
            line-height: 1.4;
        }
        
        .loading {
            text-align: center;
            padding: 30px;
            color: #666;
            font-style: italic;
        }
        
        .error {
            background-color: #ffebee;
            color: #c62828;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 15px;
            border-left: 4px solid #f44336;
        }
        
        @media (max-width: 768px) {
            .section-header {
                flex-direction: column;
                align-items: stretch;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            table {
                display: block;
                overflow-x: auto;
            }
        }
    </style>
    <script>
        // L√≥gica principal - Persona A
        const API_URL = 'https://jsonplaceholder.typicode.com';
        
        // Variables globales
        let users = [];
        let posts = [];
        let comments = [];
        
        // Funci√≥n para cambiar entre pesta√±as
        function showTab(tabName) {
            // Ocultar todas las pesta√±as
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Quitar la clase active de todas las pesta√±as
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Mostrar la pesta√±a seleccionada
            document.getElementById(tabName + '-tab').classList.add('active');
            
            // Marcar la pesta√±a como activa
            event.target.classList.add('active');
            
            // Cargar datos seg√∫n la pesta√±a
            switch(tabName) {
                case 'users':
                    if (users.length === 0) loadUsers();
                    break;
                case 'posts':
                    if (posts.length === 0) loadPosts();
                    break;
                case 'comments':
                    if (comments.length === 0) loadComments();
                    break;
            }
        }
        
        // Cargar usuarios desde la API
        async function loadUsers() {
            try {
                showLoading('users');
                const response = await fetch(API_URL + '/users');
                users = await response.json();
                displayUsers();
            } catch (error) {
                showError('users', 'Error al cargar usuarios: ' + error.message);
            }
        }
        
        // Mostrar usuarios
        function displayUsers(userList = users) {
            const container = document.getElementById('users-content');
            
            let html = `
                <div class="section-header">
                    <input type="text" class="search-box" id="user-search" 
                           placeholder="üîç Buscar por nombre, email o ciudad..." 
                           onkeyup="searchUsers()">
                    <button class="btn-primary" onclick="openUserModal()">‚ûï Agregar Usuario</button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Email</th>
                            <th>Ciudad</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            userList.forEach(user => {
                html += `
                    <tr>
                        <td>${user.id}</td>
                        <td>${user.name}</td>
                        <td>${user.email}</td>
                        <td>${user.address.city}</td>
                        <td>
                            <button class="btn-primary" onclick="editUser(${user.id})">‚úèÔ∏è Editar</button>
                            <button class="btn-warning" onclick="viewUserPosts(${user.id})">üìù Posts</button>
                            <button class="btn-danger" onclick="deleteUser(${user.id})">üóëÔ∏è Eliminar</button>
                        </td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // Buscar usuarios
        function searchUsers() {
            const searchTerm = document.getElementById('user-search').value.toLowerCase();
            const filteredUsers = users.filter(user => 
                user.name.toLowerCase().includes(searchTerm) || 
                user.email.toLowerCase().includes(searchTerm) ||
                user.address.city.toLowerCase().includes(searchTerm)
            );
            displayUsers(filteredUsers);
        }
        
        // Cargar posts desde la API
        async function loadPosts() {
            try {
                showLoading('posts');
                const response = await fetch(API_URL + '/posts');
                posts = await response.json();
                displayPosts();
            } catch (error) {
                showError('posts', 'Error al cargar posts: ' + error.message);
            }
        }
        
        // Mostrar posts
        function displayPosts(postList = posts) {
            const container = document.getElementById('posts-content');
            
            let html = `
                <div class="section-header">
                    <input type="text" class="search-box" id="post-search" 
                           placeholder="üîç Buscar por t√≠tulo o contenido..." 
                           onkeyup="searchPosts()">
                    <button class="btn-primary" onclick="openPostModal()">‚ûï Agregar Post</button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>T√≠tulo</th>
                            <th>Usuario</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            postList.forEach(post => {
                const user = users.find(u => u.id === post.userId);
                const userName = user ? user.name : 'Desconocido';
                
                html += `
                    <tr>
                        <td>${post.id}</td>
                        <td>${post.title}</td>
                        <td>${userName}</td>
                        <td>
                            <button class="btn-primary" onclick="editPost(${post.id})">‚úèÔ∏è Editar</button>
                            <button class="btn-warning" onclick="viewPostComments(${post.id})">üí¨ Comentarios</button>
                            <button class="btn-danger" onclick="deletePost(${post.id})">üóëÔ∏è Eliminar</button>
                        </td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // Buscar posts
        function searchPosts() {
            const searchTerm = document.getElementById('post-search').value.toLowerCase();
            const filteredPosts = posts.filter(post => 
                post.title.toLowerCase().includes(searchTerm) || 
                post.body.toLowerCase().includes(searchTerm)
            );
            displayPosts(filteredPosts);
        }
    <script>
        
        // Cargar comentarios desde la API
        async function loadComments() {
            try {
                showLoading('comments');
                const response = await fetch(API_URL + '/comments');
                comments = await response.json();
                displayComments();
            } catch (error) {
                showError('comments', 'Error al cargar comentarios: ' + error.message);
            }
        }
        
        // Mostrar comentarios
        function displayComments(commentList = comments) {
            const container = document.getElementById('comments-content');
            
            let html = `
                <div class="section-header">
                    <button class="btn-primary" onclick="openCommentModal()">‚ûï Agregar Comentario</button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Email</th>
                            <th>Post</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            commentList.forEach(comment => {
                const post = posts.find(p => p.id === comment.postId);
                const postTitle = post ? (post.title.length > 50 ? post.title.substring(0, 50) + '...' : post.title) : 'Desconocido';
                
                html += `
                    <tr>
                        <td>${comment.id}</td>
                        <td>${comment.name}</td>
                        <td>${comment.email}</td>
                        <td>${postTitle}</td>
                        <td>
                            <button class="btn-primary" onclick="editComment(${comment.id})">‚úèÔ∏è Editar</button>
                            <button class="btn-danger" onclick="deleteComment(${comment.id})">üóëÔ∏è Eliminar</button>
                        </td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // Ver comentarios de un post
        async function viewPostComments(postId) {
            try {
                const response = await fetch(API_URL + '/posts/' + postId + '/comments');
                const postComments = await response.json();
                
                const postsContent = document.getElementById('posts-content');
                let html = postsContent.innerHTML;
                
                html += `
                    <div class="comments-section">
                        <h3>üí¨ Comentarios del Post</h3>
                        <div id="comments-list">
                `;
                
                if (postComments.length === 0) {
                    html += '<p class="loading">No hay comentarios para este post</p>';
                } else {
                    postComments.forEach(comment => {
                        html += `
                            <div class="comment">
                                <div class="comment-header">
                                    <span class="comment-author">${comment.name}</span>
                                    <span class="comment-email">${comment.email}</span>
                                </div>
                                <div class="comment-body">${comment.body}</div>
                            </div>
                        `;
                    });
                }
                
                html += '</div></div>';
                postsContent.innerHTML = html;
            } catch (error) {
                showError('posts', 'Error al cargar comentarios: ' + error.message);
            }
        }
        
        // Ver posts de un usuario
        function viewUserPosts(userId) {
            // Cambiar a la pesta√±a de posts
            showTab('posts');
            
            // Filtrar posts por usuario
            const userPosts = posts.filter(post => post.userId === userId);
            displayPosts(userPosts);
            
            // Establecer el t√©rmino de b√∫squeda
            document.getElementById('post-search').value = `Usuario: ${userId}`;
        }
        
        // Funciones para mostrar estados
        function showLoading(section) {
            const container = document.getElementById(section + '-content');
            container.innerHTML = '<div class="loading">‚è≥ Cargando ' + section + '...</div>';
        }
        
        function showError(section, message) {
            const container = document.getElementById(section + '-content');
            container.innerHTML = '<div class="error">‚ùå ' + message + '</div>';
        }
        
        // Funciones para abrir modales
        function openUserModal(userId = null) {
            const modal = document.getElementById('user-modal');
            const title = document.getElementById('user-modal-title');
            
            if (userId) {
                title.textContent = '‚úèÔ∏è Editar Usuario';
                const user = users.find(u => u.id === userId);
                document.getElementById('user-id').value = user.id;
                document.getElementById('user-name').value = user.name;
                document.getElementById('user-email').value = user.email;
                document.getElementById('user-phone').value = user.phone;
                document.getElementById('user-city').value = user.address.city;
            } else {
                title.textContent = '‚ûï Agregar Usuario';
                document.getElementById('user-form').reset();
                document.getElementById('user-id').value = '';
            }
            
            modal.style.display = 'flex';
        }
        
        function openPostModal(postId = null) {
            const modal = document.getElementById('post-modal');
            const title = document.getElementById('post-modal-title');
            const userSelect = document.getElementById('post-user');
            
            // Cargar usuarios en el select
            userSelect.innerHTML = '<option value="">Seleccionar usuario...</option>';
            users.forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = user.name;
                userSelect.appendChild(option);
            });
            
            if (postId) {
                title.textContent = '‚úèÔ∏è Editar Post';
                const post = posts.find(p => p.id === postId);
                document.getElementById('post-id').value = post.id;
                document.getElementById('post-title').value = post.title;
                document.getElementById('post-body').value = post.body;
                document.getElementById('post-user').value = post.userId;
            } else {
                title.textContent = '‚ûï Agregar Post';
                document.getElementById('post-form').reset();
                document.getElementById('post-id').value = '';
            }
            
            modal.style.display = 'flex';
        }
        
        function openCommentModal(commentId = null) {
            const modal = document.getElementById('comment-modal');
            const title = document.getElementById('comment-modal-title');
            const postSelect = document.getElementById('comment-post');
            
            // Cargar posts en el select
            postSelect.innerHTML = '<option value="">Seleccionar post...</option>';
            posts.forEach(post => {
                const option = document.createElement('option');
                option.value = post.id;
                option.textContent = post.title.length > 50 ? post.title.substring(0, 50) + '...' : post.title;
                postSelect.appendChild(option);
            });
            
            if (commentId) {
                title.textContent = '‚úèÔ∏è Editar Comentario';
                const comment = comments.find(c => c.id === commentId);
                document.getElementById('comment-id').value = comment.id;
                document.getElementById('comment-name').value = comment.name;
                document.getElementById('comment-email').value = comment.email;
                document.getElementById('comment-body').value = comment.body;
                document.getElementById('comment-post').value = comment.postId;
            } else {
                title.textContent = '‚ûï Agregar Comentario';
                document.getElementById('comment-form').reset();
                document.getElementById('comment-id').value = '';
            }
            
            modal.style.display = 'flex';
        }
        
        // Funciones para cerrar modales
        function closeUserModal() {
            document.getElementById('user-modal').style.display = 'none';
        }
        
        function closePostModal() {
            document.getElementById('post-modal').style.display = 'none';
        }
        
        function closeCommentModal() {
            document.getElementById('comment-modal').style.display = 'none';
        }
        
        // Funciones de edici√≥n
        function editUser(userId) {
            openUserModal(userId);
        }
        
        function editPost(postId) {
            openPostModal(postId);
        }
        
        function editComment(commentId) {
            openCommentModal(commentId);
        }
        
        // Funciones de eliminaci√≥n
        function deleteUser(userId) {
            if (confirm('¬øEst√°s seguro de que quieres eliminar este usuario?')) {
                alert('‚úÖ Usuario eliminado (simulado)');
                loadUsers();
            }
        }
        
        function deletePost(postId) {
            if (confirm('¬øEst√°s seguro de que quieres eliminar este post?')) {
                alert('‚úÖ Post eliminado (simulado)');
                loadPosts();
            }
        }
        
        function deleteComment(commentId) {
            if (confirm('¬øEst√°s seguro de que quieres eliminar este comentario?')) {
                alert('‚úÖ Comentario eliminado (simulado)');
                loadComments();
            }
        }
        
        // Manejo de formularios
        document.getElementById('user-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const userId = document.getElementById('user-id').value;
            
            if (userId) {
                alert('‚úÖ Usuario actualizado (simulado)');
            } else {
                alert('‚úÖ Usuario creado (simulado)');
            }
            
            closeUserModal();
            loadUsers();
        });
        
        document.getElementById('post-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const postId = document.getElementById('post-id').value;
            
            if (postId) {
                alert('‚úÖ Post actualizado (simulado)');
            } else {
                alert('‚úÖ Post creado (simulado)');
            }
            
            closePostModal();
            loadPosts();
        });
        
        document.getElementById('comment-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const commentId = document.getElementById('comment-id').value;
            
            if (commentId) {
                alert('‚úÖ Comentario actualizado (simulado)');
            } else {
                alert('‚úÖ Comentario creado (simulado)');
            }
            
            closeCommentModal();
            loadComments();
        });
        
        // Cargar datos iniciales
        loadUsers();
    </script>
</body>
</html>